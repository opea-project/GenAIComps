# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Helm Chart Test on GenAIComps For Call
permissions: read-all
on:
  workflow_call:
    inputs:
      service:
        default: "chatqna"
        required: true
        type: string
        description: "service to test, e.g. asr"
      dockerhub:
        default: false
        required: false
        type: boolean
        description: "Set to true if you want to use released docker images at dockerhub. By default using internal docker registry."
      tag:
        default: "latest"
        required: false
        type: string
      mode:
        default: "CD"
        description: "Whether the test range is CI, CD or CICD"
        required: false
        type: string
      version:
        default: "0-latest"
        required: false
        type: string

jobs:
  get-test-case:
    runs-on: ubuntu-latest
    outputs:
      run_matrix: ${{ steps.get-test-files.outputs.run_matrix }}
      CHECKOUT_REF: ${{ steps.get-checkout-ref.outputs.CHECKOUT_REF }}
    steps:
      - name: Get checkout ref
        id: get-checkout-ref
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            CHECKOUT_REF=refs/pull/${{ github.event.number }}/merge
          else
            CHECKOUT_REF=${{ github.ref }}
          fi
          echo "CHECKOUT_REF=${CHECKOUT_REF}" >> $GITHUB_OUTPUT
          echo "checkout ref ${CHECKOUT_REF}"

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-checkout-ref.outputs.CHECKOUT_REF }}
          fetch-depth: 0

      - name: Get test Services
        id: get-test-files
        run: |
          set -x
          if [ "${{ inputs.mode }}" = "CI" ]; then
            base_commit=${{ github.event.pull_request.base.sha }}
            merged_commit=$(git log -1 --format='%H')
            values_files=$(git diff --name-only ${base_commit} ${merged_commit} | \
            grep "values.yaml" | \
            grep "${{ inputs.service }}" | \
            sort -u )
            echo $values_files
          elif [ "${{ inputs.mode }}" = "CD" ]; then
            values_files=$(ls ${{ github.workspace }}/comps/${{ inputs.service }}/deployment/kubernetes/*values.yaml)
          fi
          run_matrix="["
          run_matrix="{\"include\":["
          for file in ${values_files}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [[ "$filename" == *"gaudi"* ]]; then
                hardware="gaudi"
                value_file="$filename"
              elif [[ "$filename" == *"nv"* ]]; then
                continue
              else
                hardware="xeon"
                value_file="$filename"
              fi
              echo "service=${{ inputs.service }}, hardware=${hardware}, value_file=${value_file}"
              if [[ $(echo ${run_matrix} | grep -c "{\"value_file\":\"${value_file}\",\"hardware\":\"${hardware}\"},") == 0 ]]; then
                run_matrix="${run_matrix}{\"value_file\":\"${value_file}\",\"hardware\":\"${hardware}\"},"
                echo "------------------ add one values file ------------------"
              fi
            fi
          done
          run_matrix="${run_matrix%,}]}"

          echo "run_matrix=${run_matrix}"
          echo "run_matrix=${run_matrix}" >> $GITHUB_OUTPUT

  helm-test:
    needs: [get-test-case]
    strategy:
      matrix: ${{ fromJSON(needs.get-test-case.outputs.run_matrix) }}
    if: ${{ needs.get-test-case.outputs.run_matrix != '[]' }}
    runs-on: k8s-${{ matrix.hardware }}
    continue-on-error: true
    steps:
      - name: Clean Up Working Directory
        run: |
          echo "service=${{ inputs.service }} hardware=${{ matrix.hardware }} value_file=${{ matrix.value_file }}"
          echo "value_file=${{ matrix.value_file }}"
          sudo rm -rf ${{github.workspace}}/*

      - name: Get checkout ref
        id: get-checkout-ref
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            CHECKOUT_REF=refs/pull/${{ github.event.number }}/merge
          else
            CHECKOUT_REF=${{ github.ref }}
          fi
          echo "CHECKOUT_REF=${CHECKOUT_REF}" >> $GITHUB_OUTPUT
          echo "checkout ref ${CHECKOUT_REF}"

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-checkout-ref.outputs.CHECKOUT_REF }}
          fetch-depth: 0

      - name: Set variables
        env:
          service: ${{ inputs.service }}
        run: |
          service_name="${service,,}"  # third_parties/bridgetower
          if [[ "${service,,}" == *"third_parties"* ]]; then
            CHART_NAME="$(echo "${service,,}"|cut -d'/' -f2)"  # bridgetower
          else
            CHART_NAME="${service_name}"  # web_retrievers
          fi
          CHART_NAME=$(echo "$CHART_NAME" | tr -cd 'a-z0-9')
          echo "service_name=$service_name" >> $GITHUB_ENV
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=${CHART_NAME}$(date +%d%H%M%S)" >> $GITHUB_ENV
          echo "NAMESPACE=comp-${CHART_NAME}-$(date +%d%H%M%S)" >> $GITHUB_ENV
          echo "ROLLOUT_TIMEOUT_SECONDS=600s" >> $GITHUB_ENV
          echo "TEST_TIMEOUT_SECONDS=600s" >> $GITHUB_ENV
          echo "KUBECTL_TIMEOUT_SECONDS=60s" >> $GITHUB_ENV
          echo "should_cleanup=false" >> $GITHUB_ENV
          echo "skip_validate=false" >> $GITHUB_ENV
          echo "CHART_FOLDER=comps/${service}/deployment/kubernetes" >> $GITHUB_ENV

      - name: get template name
        run: |
          echo "template_link=$(grep 'helm install' comps/${service_name}/deployment/kubernetes/README.md | awk -F' ' '{print $4}' | head -n 1)"
          echo "template_link=$(grep 'helm install' comps/${service_name}/deployment/kubernetes/README.md | awk -F' ' '{print $4}' | head -n 1)" >> $GITHUB_ENV

      - name: Helm install
        id: install
        env:
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HUGGINGFACEHUB_API_TOKEN }}
          HFTOKEN: ${{ secrets.HUGGINGFACEHUB_API_TOKEN }}
          value_file: ${{ matrix.value_file }}
        run: |
          set -xe
          echo "should_cleanup=true" >> $GITHUB_ENV
          if [[ ! -f ${{ github.workspace }}/${{ env.CHART_FOLDER }}/${value_file} ]]; then
            echo "No value file found, exiting test!"
            echo "skip_validate=true" >> $GITHUB_ENV
            echo "should_cleanup=false" >> $GITHUB_ENV
            exit 0
          fi

          for img in `helm template -n $NAMESPACE $RELEASE_NAME ${template_link} -f comps/${{ inputs.service }}/deployment/kubernetes/${value_file} --version ${{ inputs.version }} | grep 'image:' | grep 'opea/' | awk '{print $2}' | xargs`;
          do
            # increase helm install wait for for vllm-gaudi case
            if [[ $img == *"vllm-gaudi"* ]]; then
              ROLLOUT_TIMEOUT_SECONDS=900s
            fi
          done
          # oci://ghcr.io/opea-project/charts/${CHART_NAME} \
          if ! helm install --create-namespace --namespace $NAMESPACE $RELEASE_NAME \
            ${template_link} \
            --set global.HUGGINGFACEHUB_API_TOKEN=${HFTOKEN} \
            --set global.modelUseHostPath=/home/sdp/.cache/huggingface/hub \
            --set GOOGLE_API_KEY=${{ env.GOOGLE_API_KEY}} \
            --set GOOGLE_CSE_ID=${{ env.GOOGLE_CSE_ID}} \
            -f comps/${{ inputs.service }}/deployment/kubernetes/${value_file} \
            --version ${{ inputs.version }} \
            --wait --timeout "$ROLLOUT_TIMEOUT_SECONDS"; then
            echo "Failed to install chart ${{ inputs.service }}"
            echo "skip_validate=true" >> $GITHUB_ENV
            .github/workflows/scripts/k8s-utils.sh dump_pods_status $NAMESPACE
            exit 1
          fi
          helm list -A
          kubectl get pods -n $NAMESPACE

      - name: Validate e2e test
        if: always()
        run: |
          set -xe
          if $skip_validate; then
            echo "Skip validate"
          else
            LOG_PATH=/home/$(whoami)/helm-logs
            chart=${{ env.CHART_NAME }}
            helm test -n $NAMESPACE $RELEASE_NAME --logs --timeout "$TEST_TIMEOUT_SECONDS" | tee ${LOG_PATH}/charts-${chart}.log
            exit_code=$?
            if [ $exit_code -ne 0 ]; then
                echo "Chart ${chart} test failed, please check the logs in ${LOG_PATH}!"
                exit 1
            fi

            echo "Checking response results, make sure the output is reasonable. "
            teststatus=false
            if [[ -f $LOG_PATH/charts-${chart}.log ]] && \
            [[ $(grep -c "^Phase:.*Failed" $LOG_PATH/charts-${chart}.log) != 0 ]]; then
                teststatus=false
                ${{ github.workspace }}/.github/workflows/scripts/k8s-utils.sh dump_all_pod_logs $NAMESPACE
            else
                teststatus=true
            fi

            if [ $teststatus == false ]; then
                echo "Response check failed, please check the logs in artifacts!"
                exit 1
            else
                echo "Response check succeeded!"
                exit 0
            fi
          fi

      - name: Helm uninstall
        if: always()
        run: |
          if $should_cleanup ; then
            helm uninstall $RELEASE_NAME --namespace $NAMESPACE
            if ! kubectl delete ns $NAMESPACE --timeout=$KUBECTL_TIMEOUT_SECONDS; then
              kubectl delete pods --namespace $NAMESPACE --force --grace-period=0 --all
              kubectl delete ns $NAMESPACE --force --grace-period=0 --timeout=$KUBECTL_TIMEOUT_SECONDS
            fi
          fi
