# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Comps jobs
permissions: read-all
on:
  workflow_call:
    inputs:
      node:
        required: true
        type: string
      service:
        required: true
        type: string
      tag:
        default: "comps"
        required: false
        type: string
      build:
        default: true
        required: false
        type: boolean
      # scan:
      #   default: true
      #   required: false
      #   type: boolean
jobs:
  ####################################################################################################
  # Image Build
  ####################################################################################################
  build-images:
    runs-on: "docker-build-${{ inputs.node }}"
    continue-on-error: true
    steps:
      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout out Repo
        uses: actions/checkout@v4

      - name: Clone required Repo
        run: |
          cd ${{ github.workspace }}/.github/workflows/docker/compose
          # service=$(echo ${{ inputs.service }} | cut -d'_' -f1)
          docker_compose_yml=${{ github.workspace }}/.github/workflows/docker/compose/${{ inputs.service }}-compose.yaml
          echo ${docker_compose_yml}
          if [[ $(grep -c "llava-tgi:" ${docker_compose_yml}) != 0 ]]; then
              git clone https://github.com/yuanwu2017/tgi-gaudi.git && cd tgi-gaudi && git checkout v2.0.4
          fi
          if [[ $(grep -c "vllm-openvino:" ${docker_compose_yml}) != 0 ]]; then
              git clone https://github.com/vllm-project/vllm.git vllm-openvino
          fi
          # echo "service=$service" >> $GITHUB_ENV

      - name: Build Image
        if: ${{ fromJSON(inputs.build) }}
        uses: opea-project/validation/actions/image-build@main
        with:
          work_dir: ${{ github.workspace }}/
          docker_compose_path: ${{ github.workspace }}/.github/workflows/docker/compose/${{ inputs.service }}-compose.yaml
          registry: ${OPEA_IMAGE_REPO}opea
          tag: ${{ inputs.tag }}
  # ####################################################################################################
  # # Trivy Scan
  # ####################################################################################################
  #   get-image-list:
  #     needs: [build-images]
  #     if: ${{ fromJSON(inputs.scan) && inputs.node == 'gaudi' }}
  #     runs-on: ubuntu-latest
  #     outputs:
  #       matrix: ${{ steps.scan-matrix.outputs.matrix }}
  #     steps:
  #       - name: Checkout out Repo
  #         uses: actions/checkout@v4

  #       - name: Set Matrix
  #         id: scan-matrix
  #         run: |
  #           pip install yq
  #           compose_path=${{ github.workspace }}/${{ inputs.example }}/docker/docker_build_compose.yaml
  #           echo "matrix=$(cat ${compose_path} | yq -r '.[]' | jq 'keys' | jq -c '.')" >> $GITHUB_OUTPUT

  #   scan-images:
  #     needs: [get-image-list, build-images]
  #     if: ${{ fromJSON(inputs.scan) && inputs.node == 'gaudi'}}
  #     runs-on: "docker-build-${{ inputs.node }}"
  #     strategy:
  #       matrix:
  #         image: ${{ fromJSON(needs.get-image-list.outputs.matrix) }}
  #       fail-fast: false
  #     steps:
  #       - name: Pull Image
  #         run: |
  #           docker pull ${OPEA_IMAGE_REPO}opea/${{ matrix.image }}:${{ inputs.tag }}
  #           echo "OPEA_IMAGE_REPO=${OPEA_IMAGE_REPO}" >> $GITHUB_ENV

  #       - name: Scan Container
  #         uses: opea-project/validation/actions/trivy-scan@main
  #         with:
  #           image-ref: ${{ env.OPEA_IMAGE_REPO }}opea/${{ matrix.image }}:${{ inputs.tag }}
  #           output: ${{ matrix.image }}-scan.txt

  #       - name: Cleanup
  #         if: always()
  #         run: docker rmi -f ${OPEA_IMAGE_REPO}opea/${{ matrix.image }}:${{ inputs.tag }}

  #       - uses: actions/upload-artifact@v4.3.4
  #         with:
  #           name: ${{ matrix.image }}-scan
  #           path: ${{ matrix.image }}-scan.txt
  #           overwrite: true

  ####################################################################################################
  # Docker Compose Test
  ####################################################################################################
  test-service-compose:
    needs: [build-images]
    uses: ./.github/workflows/_run-docker-compose.yml
    with:
      tag: ${{ inputs.tag }}
      service: ${{ inputs.service }}
      hardware: ${{ inputs.node }}
    secrets: inherit
